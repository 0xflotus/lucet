#! /usr/bin/env python

import argparse
import os
import sys
import subprocess

import ninja_syntax
import manifest

WARNINGS = ['-Wno-incompatible-library-redeclaration',
            '-Wno-shift-op-parentheses',
            '-Wno-ignored-attributes',
            '-Wno-bitwise-op-parentheses',
            '-Wno-pointer-sign',
            '-Wno-unknown-pragmas',
            '-Wno-logical-op-parentheses',
            '-Wno-absolute-value']

import fnmatch
import os

def find_recursive_with_pattern(base, pattern):
    matches = []
    for root, dirnames, filenames in os.walk(base):
        for filename in fnmatch.filter(filenames, pattern):
            matches.append(os.path.join(root, filename))
    return matches


def main():
    parser = argparse.ArgumentParser(
            description='build and install musl libc for wasm')
    parser.add_argument('--out-dir', help='set output directory')
    parser.add_argument('--no-ninja', action="store_true", help='disable ninja')
    parser.add_argument('--verbose', action="store_true", help='show ninja stdout')
    args = parser.parse_args()
    out_dir = os.path.abspath(args.out_dir)

    sysroot_dir = os.path.join(out_dir, 'sysroot', 'include') # install to PACKAGE_PREFIX/share/libc_sysroot/include
    include_dir = os.path.join(out_dir, 'include') # install to PACKAGE_PREFIX/include
    lib_dir = os.path.join(out_dir, 'lib') # install to PACKAGE_PREFIX/lib
    wasm_lib_dir = os.path.join(out_dir, 'wasmlib') # install to PACKAGE_PREFIX/wasmlib

    src_root = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))
    musl_root = os.path.join(src_root, 'musl')
    host_root = os.path.join(src_root, 'host')
    compiler_rt_root = os.path.join(src_root, 'compiler-rt')

    liblucet_runtime_c_root = os.path.join(os.path.dirname(os.path.dirname(src_root)), 'lucet-runtime-c')

    n = ninja_syntax.Writer(open(os.path.join(out_dir, "build.ninja"), "w"))
    n.comment("autogenerated by build.py")

    n.variable('src_root', src_root)
    n.variable('clang', os.environ.get('LUCET_CLANG') or 'clang')
    n.variable('ar', os.environ.get('LUCET_LLVM_AR') or 'llvm-ar')
    n.variable('wasm-ld', os.environ.get('LUCET_WASM_LD') or 'wasm-ld')

    n.variable('mkalltypes', os.path.join(musl_root, 'tools', 'mkalltypes.sed'))
    n.rule('alltypes',
            command='sed -f $mkalltypes $in > $out',
            description="ALLTYPES $out")

    alltypes_header = os.path.join(sysroot_dir, 'bits', 'alltypes.h')
    wasm32_alltypes_in = os.path.join(src_root, 'arch', 'wasm32', 'bits', 'alltypes.h.in')
    base_alltypes_in = os.path.join(musl_root, 'include', 'alltypes.h.in')
    n.build(alltypes_header,
        'alltypes', [
            wasm32_alltypes_in,
            base_alltypes_in,
    ])

    n.rule('version',
            command='printf \'#define VERSION "%s"\\n\' $$(cd $src_root/musl && sh tools/version.sh) > $out',
            description="VERSION $out")
    version_header = os.path.join(out_dir, 'internal', 'version.h')
    n.build(version_header,'version')

    n.variable('wasm_includes', [
        '-I' + os.path.join(out_dir, 'internal'),
        '-I' + os.path.join(musl_root, 'src', 'internal'),
        '-I' + os.path.join(sysroot_dir),
        ])

    n.variable('wasm_warnings', WARNINGS)

    n.variable('wasm_cflags', [
        '-target wasm32-wasm',
        '-Os', '-nostdinc', '$wasm_includes', '$wasm_warnings',
        '-fvisibility=default',
        ])

    n.variable('host_includes', [
        '-I' + os.path.join(liblucet_runtime_c_root, 'include'),
        '-I' + os.path.join(host_root, 'include'),
        ])

    n.variable('host_cflags', [
        '--std=c11', '-fPIC',
        '-O2', '-g3',
        '-Wall', '-Werror',
        '$host_includes'
        ])

    n.rule('cp',
            command='cp $in $out',
            description='CP $out')

    n.rule('wasm_cc',
            command='$clang $wasm_cflags -c $in -o $out',
            description='WASMCC $out',
            depfile='$out.d',
            deps='gcc')

    n.rule('host_cc',
            command='cc $host_cflags -c $in -o $out',
            description='HOSTCC $out',
            depfile='$out.d',
            deps='gcc')

    n.rule('so',
            command='cc -shared $in -o $out',
            description='SO $out',
            depfile='$out.d',
            deps='gcc')

    n.rule('ar',
            command='$ar rcs $out $in',
            description='AR $out')

    wasm_headers = []
    def wasm_header(h, root):
        base = os.path.relpath(h, root)
        copy = os.path.join(sysroot_dir, base)
        n.build(copy, 'cp', h)
        wasm_headers.append(copy)

    for h in find_recursive_with_pattern(os.path.join(musl_root, 'include'), '*.h'):
        wasm_header(h, os.path.join(musl_root, 'include'))

    for h in find_recursive_with_pattern(os.path.join(src_root, 'arch', 'wasm32'), '*.h'):
        wasm_header(h, os.path.join(src_root, 'arch', 'wasm32'))

    for h in find_recursive_with_pattern(os.path.join(musl_root, 'arch', 'generic'), '*.h'):
        base = os.path.relpath(h, os.path.join(musl_root, 'arch', 'generic'))
        copy = os.path.join(sysroot_dir, base)
        # This case is different: some arch headers are meant to shadow the generic headers.
        if copy not in wasm_headers:
            n.build(copy, 'cp', h)
            wasm_headers.append(copy)


    wasm_objs = []
    def wasm_cc(src, root):
        base = os.path.relpath(src, root)
        obj = os.path.join(out_dir, 'build', base + '.o')
        n.build(obj, 'wasm_cc', src, implicit=[alltypes_header, version_header] + wasm_headers)
        wasm_objs.append(obj)

    for src in manifest.musl_srcs(musl_root):
        wasm_cc(src, musl_root)

    for src in manifest.wasm_srcs(src_root):
        wasm_cc(src, src_root)

    for src in manifest.compiler_rt_srcs(compiler_rt_root):
        wasm_cc(src, compiler_rt_root)

    n.build(os.path.join(wasm_lib_dir, 'libc.a'), 'ar', wasm_objs)

    host_headers = []
    def host_header(h, root):
        base = os.path.relpath(h, root)
        copy = os.path.join(include_dir, base)
        n.build(copy, 'cp', h)
        host_headers.append(copy)

    host_header_root = os.path.join(host_root, 'include')
    for h in find_recursive_with_pattern(host_header_root, '*.h'):
        host_header(h, host_header_root)

    host_header(os.path.join(src_root, 'bindings.json'), src_root)

    host_objs = []
    def host_cc(src, root):
        base = os.path.relpath(src, root)
        obj = os.path.join(out_dir, 'build', base + '.o')
        n.build(obj, 'host_cc', src, implicit=[alltypes_header, version_header] + host_headers)
        host_objs.append(obj)

    for src in manifest.host_srcs(host_root):
        host_cc(src, host_root)

    n.build(os.path.join(lib_dir, 'liblucet_libc.a'), 'ar', host_objs)
    n.build(os.path.join(lib_dir, 'liblucet_libc.so'), 'so', host_objs)

    n.close()

    if args.no_ninja:
        return 0
    else:
        cmd = ["ninja"]
        if args.verbose:
            cmd.append("-v")
        ninja = subprocess.Popen(cmd, cwd=out_dir)
        out, err = ninja.communicate()

        return ninja.returncode

if __name__ == '__main__':
    sys.exit(main())
